package com.tim.compiler

import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KotlinFile
import javax.lang.model.element.TypeElement
import com.squareup.kotlinpoet.TypeName.Companion.asTypeName
import com.squareup.kotlinpoet.TypeSpec
import com.tim.annotation.Event
import javax.tools.StandardLocation

/**
 * Created by pc on 2017/10/18.
 */

// notification the the
class ClassBuilder(val typeElement: TypeElement, val methodElement: List<EventElement>) {
//    companion object {
//        const val caller = "target"
//        const val request = "requestCode"
//        const val result = "result"
//    }
//      obtain the package name of the typeElement
//    val typeTarget = ElementUtils.getTypeElement(fullName).asType()
//    val target = typeTarget.asTypeName()
//
//    val event = typeElement.getChildWithAnnotation(Event::class.java)
//
//
//    fun addProperties(){
//
//    }
    val PACKAGE_NAME = ElementUtils.getPackageOf(typeElement).qualifiedName.toString()
    private val packageName = ElementUtils.getPackageOf(typeElement).qualifiedName.toString()
    private val fullName = typeElement.qualifiedName.toString()
    private val className by lazy {
        val name = fullName.substring(packageName.length + 1)
        val index = name.indexOf(".")
        if (index > 0) {
            return@lazy name.substring(index + 1, name.length)
        }
        name
    }


    fun brewKotlin() {
        val classname = "${className}Event"
        val typeSpec = TypeSpec.objectBuilder(classname)
        methodElement.forEach{
            eventElement->
                addEventFunction(typeSpec,eventElement)
        }
        filerUtils.createResource(StandardLocation.SOURCE_OUTPUT, PACKAGE_NAME, "$className.kt")
                .openWriter()
                .use {
                    with(KotlinFile.builder(PACKAGE_NAME,classname)){
                        addType(typeSpec.build())
                        addFileComment("generated by Kapt , Do not modify!")
                        build()
                    }.writeTo(it)
                }

    }

    private fun addEventFunction(typeSpec: TypeSpec.Builder,eventElement: EventElement) {
        val builder  = FunSpec.builder(eventElement.functionName)
                .addParameter("state",Int::class)
        typeSpec.addFun(builder.build())
    }
}