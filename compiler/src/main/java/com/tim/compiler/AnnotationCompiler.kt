package com.tim.compiler

import com.google.auto.service.AutoService
import com.squareup.kotlinpoet.KotlinFile
import com.squareup.kotlinpoet.TypeSpec
import com.tim.annotation.Event
import javax.annotation.processing.*
import javax.lang.model.SourceVersion
import javax.lang.model.element.ExecutableElement
import javax.lang.model.element.TypeElement
import javax.tools.StandardLocation


@AutoService(Processor::class)
//@SupportedSourceVersion(value = SourceVersion.getLatestSupported())
class AnnotationCompiler:AbstractProcessor(){

    override fun getSupportedSourceVersion(): SourceVersion {
        return SourceVersion.latestSupported()
    }

    override fun getSupportedAnnotationTypes(): Set<String> {
        return setOf(Event::class.java.canonicalName)
    }

    /**
     * @return Boolean can provide other processor to use it
     * */
    override fun process(set: MutableSet<out TypeElement>, roundEnvironment: RoundEnvironment): Boolean {
//        roundEnvironment.getElementsAnnotatedWith(Event::class.java)//return Set<Element>
//                .groupBy { it.enclosingElement } // base on the key split the LinkedHashMap<Element, MutableList<Element>>()
//                .map { ClassBuilder(it.key as TypeElement,it.value.map { EventElement(it as ExecutableElement) }) }
//                .map { it.brewKotlin() }
        return false
    }

//    fun brewKotlin() {
//        val classname = "${className}Event"
//        val typeSpec = TypeSpec.objectBuilder(classname)
//        methodElement.forEach{
//            eventElement->
//            addEventFunction(typeSpec,eventElement)
//        }
//        filerUtils.createResource(StandardLocation.SOURCE_OUTPUT, PACKAGE_NAME, "$className.kt")
//                .openWriter()
//                .use {
//                    with(KotlinFile.builder(PACKAGE_NAME,classname)){
//                        addType(typeSpec.build())
//                        addFileComment("generated by Kapt , Do not modify!")
//                        build()
//                    }.writeTo(it)
//                }
//
//    }
}
